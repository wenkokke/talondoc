TalonDoc
========

.. toctree::
  :maxdepth: 1
  
  knausj_talon/index.rst

Loading a Talon package
-----------------------

TalonDoc can analyse a Talon package or user directory. To load all Talon and
Python files in our example package, ``examples/knausj_talon``, we use the
``talon:package`` directive:

.. code-block:: rst

  .. talon:package:: ../knausj_talon
    :name: user
    :exclude: conftest.py, test/**, **/*.py
    :trigger: ready

.. talon:package:: ../knausj_talon
  :name: user
  :exclude: conftest.py, test/**, **/*.py
  :trigger: ready

The ``talon:package`` directive takes a single argument, which is the path to
the package. We could also have used ``talon:user``, which uses the path to
the Talon user directory, *e.g.*, ``~/.talon/user`` or ``%AppData%\Talon\user``.

Both ``talon:package`` and ``talon:user`` take a number of options:

``:name:``
  The name of the Talon package.
  This is used to resolve ``self.*`` references.
  Defaults to ``user``.

``:include:``
  A list of glob patterns.
  All ``.talon`` and ``.py`` files in the package directory are included by
  default, but any file matched by an include pattern will be included *even
  if* it matches any of the patterns in ``:exclude:``.

``:exclude:``
  A list of glob patterns.
  Any file matched by an exclude pattern will be excluded *unless* it matches
  any of the patterns in ``:include:``.

``:trigger:``
  A list of Talon events.
  These events will be triggered after the entire package has been loaded.
  Useful for making sure that "launch" and "ready" callbacks fire.

Document individual commands
----------------------------

TalonDoc can generate documentation for an individual command using
``talon:command`` by entering any phrase which triggers the command.
For instance, the following code:

.. code-block:: rst

  .. talon:command:: hunt this
    :script: true

  .. talon:command:: hunt this pace
    :script: true

...will generate the following bit of documentation:

.. talon:command:: hunt this
  :script: true

.. talon:command:: hunt this pace
  :script: true

TalonDoc will attempt to generate documentation for the command using the
following three options, in order:

#. Use the Talon docstrings in the command script.
   Talon docstrings are comments which start with ``###``.
#. Use the Python docstrings from the actions used in the command script.
#. Include the command script.

Optionally, ``:script: true`` forces TalonDoc to always include the command
script, in addition to any generated documentation.


Document groups of commands
---------------------------

TalonDoc can generate documentation for groups of commands via two different
directives: ``talon:command-table`` and ``talon:command-hlist``. The first
generates a table with two columns---the rule and the description (as above).
The second generates a horizontal list with command descriptions as those
generated by ``talon:command``. Both directives have the same options.

For instance, the following code:

.. code-block:: rst

  .. talon:command-table:: user.apps.discord.discord
    :default: exclude
    :include: answer call, decline call

  .. talon:command-table::
    :caption: A little custom hunting table.
    :include: hunt this, hunt this paste

... generates the following two tables:

.. talon:command-table:: user.apps.discord.discord
  :default: exclude
  :include: answer call, decline call

.. talon:command-table::
  :caption: A little custom hunting table.
  :include: hunt this, hunt this paste


Similarily, the following code:

.. code-block:: rst

  .. talon:command-hlist:: user.apps.discord.discord
    :default: exclude
    :include: toggle inbox, oldest unread, mark inbox channel read
    :columns: 3

... generates the following list:

.. talon:command-hlist:: user.apps.discord.discord
  :default: exclude
  :include: toggle inbox, oldest unread, mark inbox channel read
  :columns: 3

The ``talon:command-table`` and ``talon:command-hlist`` directives take any
number of arguments, which can either be file paths relative to the package
root, *e.g.*, ``apps/discord/discord.talon``, or module names, *e.g.*,
``user.apps.discord.discord.talon``. In either case, the ``.talon`` suffix
is optional. If no arguments are given, commands are included from the *entire
package*. Furthermore, these directives take the following options:

``:caption:``
  A caption for the table.
  Defaults to the module name, if given.

``:default:``
  Either ``include`` or ``exclude``.
  Determines whether commands are included or excluded by default.
  Defaults to ``include`` if a file path or module name is specific,
  and to ``exclude`` otherwise.

``:include:``
  A list of command phrases.
  If ``:default:`` is set to ``exclude``, a command matching any of these phrases
  is included *unless* it is matched by any of the phrases in ``:exclude:``.
  If ``:default:`` is set to ``include``, a command matching any of these phrases
  is included *even if* it is matched by any of the phrases in ``:exclude:``.

``:exclude:``
  A list of command phrases.
  If ``:default:`` is set to ``exclude``, a command matching any of these phrases
  is excluded *even if* it is matched by any of the phrases in ``:include:``.
  If ``:default:`` is set to ``include``, a command matching any of these phrases
  is excluded *unless* it is matched by any of the phrases in ``:include:``.
