[build-system]
requires = ["setuptools>=45"]
build-backend = "setuptools.build_meta"

[project]
name = "talondoc"
version = "0.4.2"
description = "A Sphinx extension for Talon user directories."
license = { file = 'LICENSE' }
authors = [{ name = "Wen Kokke", email = "wenkokke@users.noreply.github.com" }]
readme = "README.md"
keywords = ["talon", "sphinx"]
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Topic :: Software Development :: Compilers",
]
requires-python = ">=3.7,<3.12"
dependencies = [
  "awesome_progress-bar >=1.7,<2",
  "docstring_parser >=0.14,<0.16",
  "editdistance >=0.6,<0.7",
  "Jinja2 >=3,<4",
  "Sphinx >=5,<8",
  "talonfmt >=1.7.4,<2",
  "tree_sitter_talon >=1007.2.0.0",
  'pywin32;platform_system=="Windows"',
]

[project.optional-dependencies]
mypy = [
  "types_click",
  "types_docutils",
  "types_editdistance",
  "types_jinja2",
  "types_pytz",
  "types_setuptools",
]
test = [
  "bumpver",
  "myst_parser >=1,<2",
  "sphinx_rtd_theme >=1.2,<2",
  "sphinx_tabs >=3.4,<5"
]
docs = [
  "myst_parser >=1,<2",
  "sphinx_rtd_theme >=1.2,<2",
  "sphinx_tabs >=3.4,<5"
]

[project.scripts]
talondoc = "talondoc:talondoc"

[tool.bumpver]
current_version = "0.4.2"
version_pattern = "MAJOR.MINOR.PATCH"
commit_message = "Bump version {old_version} -> {new_version}"
commit = true
tag = true
push = true

[tool.bumpver.file_patterns]
"pyproject.toml" = [
  '^current_version = "{version}"$',
  '^version = "{version}"$',
]
"example/docs/conf.py" = ['^release = "{version}"$']
"src/talondoc/_version.py" = ['^__version__: str = "{version}"$']

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = 3.9
check_untyped_defs = true
strict_optional = true
ignore_missing_imports = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
implicit_reexport = false
strict_concatenate = true
strict_equality = true
# disallow_untyped_calls = true
# disallow_untyped_defs = true
# disallow_incomplete_defs = true
disallow_untyped_decorators = true

[tool.pytest.ini_options]
enable_assertion_pass_hook = true
filterwarnings = ["ignore::DeprecationWarning:.*:"]
minversion = "6.0"
testpaths = ["tests"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py39, py310, py311
isolated_build = true

[testenv]
allowlist_externals = cp, mkdir, sh, rm
extras =
  test
setenv =
  TALONDOC_STRICT = 1
commands_pre =
  cp '{tox_root}/example/build.sh' '{env_tmp_dir}/build.sh'
  cp -R '{tox_root}/example/knausj_talon' '{env_tmp_dir}/knausj_talon'
  mkdir -p '{env_tmp_dir}/docs'
  cp '{tox_root}/example/docs/conf.py' '{env_tmp_dir}/docs/conf.py'
  cp '{tox_root}/example/docs/index.md' '{env_tmp_dir}/docs/index.md'
  cp -R '{tox_root}/example/docs/_static' '{env_tmp_dir}/docs/_static'
commands =
  sh '{env_tmp_dir}/build.sh'
  {envpython} -m bumpver update --patch --dry --no-fetch
commands_post =
  rm -f '{env_tmp_dir}/build.sh'
  rm -rf '{env_tmp_dir}/knausj_talon'
  rm -f '{env_tmp_dir}/docs/conf.py'
  rm -f '{env_tmp_dir}/docs/index.md'
  rm -rf '{env_tmp_dir}/docs/_static'
"""
