[build-system]
requires = ["poetry-core>=1.5.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "talondoc"
version = "0.2.0"
description = "A Sphinx extension for Talon user directories."
license = "MIT"
authors = ["Wen Kokke <wenkokke@users.noreply.github.com>"]
readme = "README.md"
documentation = "https://wenkokke.github.io/talondoc/"
repository = "https://github.com/wenkokke/talondoc"
keywords = ["talon", "sphinx"]
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Topic :: Software Development :: Compilers",
]

[tool.poetry.dependencies]
python = ">=3.9.8,<4.0.0"
awesome-progress-bar = "^1.7.2"
docstring_parser = ">=0.14.1,<0.16.0"
Jinja2 = "^3.1.2"
Sphinx = ">=5.1.1,<7.0.0"
talonfmt = "^1.7.4"
tree_sitter_talon = "^1007.2.0.0"
pywin32 = { version = "*", markers = "sys_platform == 'win32'" }
# Prevent Poetry 1.3 from removing setuptools
setuptools = "*"
# Extra: mypy
types-docutils = "*"
types-pytz = "*"
types-setuptools = "*"
# Extra: docs & test
bumpver = { version = "*", optional = true }
myst-parser = { version = "^1.0.0", optional = true }
sphinx-rtd-theme = { version = "^1.2.0", optional = true }
sphinx-tabs = { version = "^3.4.1", optional = true }

[tool.poetry.extras]
mypy = ["types-docutils", "types-pytz", "types-setuptools"]
test = ["bumpver", "myst-parser", "sphinx-rtd-theme", "sphinx-tabs"]
docs = ["myst-parser", "sphinx-rtd-theme", "sphinx-tabs"]

[tool.poetry.scripts]
talondoc = "talondoc:cli"

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = 3.9
namespace_packages = true
explicit_package_bases = true
ignore_missing_imports = true
no_implicit_optional = false
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
# See: https://github.com/python/mypy/issues/4717
disable_error_code = ['type-abstract']

[tool.pytest.ini_options]
enable_assertion_pass_hook = true
filterwarnings = ["ignore::DeprecationWarning:.*:"]
minversion = "6.0"
testpaths = ["tests"]

[tool.bumpver]
current_version = "0.2.0"
version_pattern = "MAJOR.MINOR.PATCH"
commit_message = "Bump version {old_version} -> {new_version}"
commit = true
tag = true
push = true

[tool.bumpver.file_patterns]
"pyproject.toml" = [
  '^current_version = "{version}"$',
  '^version = "{version}"$',
]
"example/docs/conf.py" = ['^release = "{version}"$']
"talondoc/__init__.py" = ['^__version__: str = "{version}"$']

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py39, py310, py311
isolated_build = true

[testenv]
allowlist_externals = cp, mkdir, sh, rm
extras =
  test
commands_pre =
  cp '{tox_root}/example/build.sh' '{env_tmp_dir}/build.sh'
  cp -R '{tox_root}/example/knausj_talon' '{env_tmp_dir}/knausj_talon'
  mkdir -p '{env_tmp_dir}/docs'
  cp '{tox_root}/example/docs/conf.py' '{env_tmp_dir}/docs/conf.py'
  cp '{tox_root}/example/docs/index.md' '{env_tmp_dir}/docs/index.md'
  cp -R '{tox_root}/example/docs/_static' '{env_tmp_dir}/docs/_static'
commands =
  sh '{env_tmp_dir}/build.sh'
  {envpython} -m bumpver update --patch --dry --no-fetch
commands_post =
  rm -f '{env_tmp_dir}/build.sh'
  rm -rf '{env_tmp_dir}/knausj_talon'
  rm -f '{env_tmp_dir}/docs/conf.py'
  rm -f '{env_tmp_dir}/docs/index.md'
  rm -rf '{env_tmp_dir}/docs/_static'
"""
