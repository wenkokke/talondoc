[build-system]
requires = ["setuptools>=45"]
build-backend = "setuptools.build_meta"

[project]
name = "talondoc"
version = "1.0.0"
description = "A Sphinx extension for Talon user directories."
license = { file = 'LICENSE' }
authors = [{ name = "Wen Kokke", email = "wenkokke@users.noreply.github.com" }]
readme = "README.md"
keywords = ["talon", "sphinx"]
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Topic :: Software Development :: Compilers",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.10,<3.14"
dependencies = [
  "awesome_progress_bar >=1.7,<2",
  "docstring_parser >=0.14,<0.17",
  "editdistance >=0.6,<0.9",
  "Jinja2 >=3,<4",
  "Sphinx >=5,<9",
  "talonfmt >=1.7.4,<2",
  "colorlog >=6.7,<7",
  "packaging >=23.1,<25",
  "tree_sitter_talon >=3!1.0,<3!2",
  'pywin32; platform_system=="Windows"',
]

[project.optional-dependencies]
mypy = [
  "types_click",
  "types_docutils",
  "types_editdistance",
  "types_jinja2",
  "types_pytz",
  "types_setuptools",
]
test = [
  "bumpver",
  "myst_parser >=1,<5",
  "furo==2024.8.6",
  "sphinx_tabs >=3.4,<5",
]
docs = ["myst_parser >=1,<5", "furo==2024.8.6", "sphinx_tabs >=3.4,<5"]
dev = ["ruff>=0.9,<1"]

[project.scripts]
talondoc = "talondoc:talondoc"

[tool.bumpver]
current_version = "1.0.0"
version_pattern = "MAJOR.MINOR.PATCH[TAG]"
commit_message = "Bump version {old_version} -> {new_version}"
commit = true
tag = true
push = true

[tool.bumpver.file_patterns]
"pyproject.toml" = [
  '^current_version = "{version}"$',
  '^version = "{pep440_version}"$',
]
"example/docs/conf.py" = ['^release = "{pep440_version}"$']
"src/talondoc/_version.py" = ['^__version__: str = "{pep440_version}"$']

[tool.ruff]
line-length = 88

exclude = [".venv", ".tox", "example/community/*"]

[tool.ruff.lint]
# Add the `line-too-long` rule to the enforced rule set. By default, Ruff omits rules that
# overlap with the use of a formatter, like Black, but we can override this behavior by
# explicitly adding the rule.
# extend-select = ["E501"]

select = [
  # Recommended Initial
  "E",   # pycodestyle
  "F",   # Pyflakes
  "UP",  # pyupgrade
  "B",   # flake8-bugbear
  "SIM", # flake8-simplify
  "I",   # isort

  # Additional
  "PTH", # flake8-use-pathlib
  "C4",  # flake8-comprehensions (C4)
  "PIE", # flake8-pie (PIE)
  "PYI", # flake8-pyi (PYI)
  "RUF", # Ruff Specific Rules
  "RET", # flake8-return (RET)

  "FLY", # flynt (FLY)

]

ignore = [
  # These are recommended to be disabled when using ruff format.
  "COM812", # missing-trailing-comma (COM812)
  "COM819", # prohibited-trailing-comma (COM819)
  "D206",   # docstring-tab-indentation (D206)
  "D300",   # triple-single-quotes (D300)
  "E111",   # indentation-with-invalid-multiple (E111)
  "E114",   # indentation-with-invalid-multiple-comment (E114)
  "E117",   # over-indented (E117)
  "ISC002", # multi-line-implicit-string-concatenation (ISC002) if used without ISC001 and flake8-implicit-str-concat.allow-multiline = false
  "Q000",   # bad-quotes-inline-string (Q000)
  "Q001",   # bad-quotes-multiline-string (Q001)
  "Q002",   # bad-quotes-docstring (Q002)
  "Q003",   # avoidable-escaped-quote (Q003)
  "W191",   # tab-indentation (W191)
]


[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 45


[tool.mypy]
python_version = "3.10"
strict = true
ignore_missing_imports = true
implicit_reexport = false
warn_unused_ignores = false

[[tool.mypy.overrides]]
module = "sphinx.application"
implicit_reexport = true

[tool.pytest.ini_options]
enable_assertion_pass_hook = true
filterwarnings = ["ignore::DeprecationWarning:.*:"]
minversion = "6.0"
testpaths = ["tests"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.tox]


legacy_tox_ini = """
[tox]
envlist = py{310,311,312}-{rst,md}
isolated_build = true

[testenv]
allowlist_externals = cp, mkdir, rm
extras =
  test
setenv =
  TALONDOC_STRICT = 1
  rst: TALONDOC_FORMAT = rst
  md: TALONDOC_FORMAT = md
commands_pre =
  cp -R '{tox_root}/example/community' '{env_tmp_dir}/community'
  mkdir -p '{env_tmp_dir}/docs'
  cp '{tox_root}/example/docs/conf.py' '{env_tmp_dir}/docs/conf.py'
  cp '{tox_root}/example/docs/index.md' '{env_tmp_dir}/docs/index.md'
  cp -R '{tox_root}/example/docs/_static' '{env_tmp_dir}/docs/_static'
commands =
  {envpython} -m bumpver update --patch --no-fetch --dry
  {envpython} -X utf8 -m talondoc autogen '{env_tmp_dir}/docs' -o 'community' --generate-index
  {envpython} -X utf8 -m talondoc build '{env_tmp_dir}/docs' '{env_tmp_dir}/docs/_build'
commands_post =
  rm -rf '{env_tmp_dir}/community'
  rm -f '{env_tmp_dir}/docs/conf.py'
  rm -f '{env_tmp_dir}/docs/index.md'
  rm -rf '{env_tmp_dir}/docs/_static'
"""
